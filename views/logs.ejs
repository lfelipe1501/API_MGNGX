<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <title>System Logs</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/mobile.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
    <div class="logs-container-wrapper">
        <div class="user-info">
            <a href="/dashboard" class="back-btn">← Back to Dashboard</a>
            <div class="action-buttons">
                <button onclick="refreshLogs()" class="refresh-btn" title="Refresh Logs">
                    <span class="material-icons">refresh</span>
                </button>
                <button onclick="logout()" class="logout-btn">
                    <span class="material-icons">power_settings_new</span>
                    <span>Logout</span>
                </button>
            </div>
        </div>
        
        <h2>System Logs</h2>
        <div id="loading" class="loading-indicator">Loading logs...</div>
        <div class="logs-container">
            <div class="table-wrapper">
                <table class="logs-table">
                    <thead>
                        <tr>
                            <th>Date/Time</th>
                            <th>Action</th>
                            <th>Description</th>
                            <th>Performed By</th>
                            <th>Performed On</th>
                        </tr>
                    </thead>
                    <tbody id="logsTableBody"></tbody>
                </table>
            </div>
            <div class="pagination">
                <button id="prevPage" class="page-btn">
                    <span class="material-icons">arrow_back</span>
                    <span>Previous</span>
                </button>
                <div class="page-numbers" id="pageNumbers"></div>
                <button id="nextPage" class="page-btn">
                    <span>Next</span>
                    <span class="material-icons">arrow_forward</span>
                </button>
            </div>
        </div>
    </div>

    <script>
        const token = '<%= token %>';
        
        // Asegurarse de que el token esté en localStorage
        if (token) {
            localStorage.setItem('jwtToken', token);
        }

        async function checkAuth() {
            const storedToken = localStorage.getItem('jwtToken');
            if (!storedToken) {
                window.location.href = '/';
                return;
            }

            try {
                const response = await fetch('/check-session', {
                    headers: {
                        'Authorization': `Bearer ${storedToken}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Session invalid');
                }
            } catch (error) {
                console.error('Auth check failed:', error);
                localStorage.removeItem('jwtToken');
                window.location.href = '/';
            }
        }

        let currentPage = 1;
        let totalPages = 1;

        async function loadLogs(page = 1) {
            const storedToken = localStorage.getItem('jwtToken');
            const loadingIndicator = document.getElementById('loading');
            const logsTableBody = document.getElementById('logsTableBody');
            
            try {
                loadingIndicator.style.display = 'block';
                
                const response = await fetch(`/api/logs?page=${page}`, {
                    headers: {
                        'Authorization': `Bearer ${storedToken}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to load logs');
                }

                const data = await response.json();
                const logs = data.logs;
                
                // Actualizar variables de paginación
                currentPage = data.currentPage;
                totalPages = data.totalPages;
                updatePaginationControls();
                
                if (logs.length === 0) {
                    logsTableBody.innerHTML = '<tr><td colspan="5" class="error-message">No logs found.</td></tr>';
                    return;
                }
                
                logsTableBody.innerHTML = logs.map(log => `
                    <tr class="log-row">
                        <td>
                            <strong>Date/Time:</strong>
                            ${new Date(log.created_at).toLocaleString()}
                        </td>
                        <td>
                            <strong>Action:</strong>
                            ${log.action_type}
                        </td>
                        <td>
                            <strong>Description:</strong>
                            ${log.action_description}
                        </td>
                        <td>
                            <strong>Performed By:</strong>
                            ${log.performed_by_username || '-'}
                        </td>
                        <td>
                            <strong>Performed On:</strong>
                            ${log.performed_on_username || '-'}
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error loading logs:', error);
                logsTableBody.innerHTML = '<tr><td colspan="5" class="error-message">Error loading logs. Please try again.</td></tr>';
            } finally {
                loadingIndicator.style.display = 'none';
            }
        }

        function updatePaginationControls() {
            const prevButton = document.getElementById('prevPage');
            const nextButton = document.getElementById('nextPage');
            const pageNumbers = document.getElementById('pageNumbers');
            
            prevButton.disabled = currentPage <= 1;
            nextButton.disabled = currentPage >= totalPages;
            
            // Generar números de página
            let html = '';
            const maxButtons = 3;
            let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
            let endPage = Math.min(totalPages, startPage + maxButtons - 1);
            
            // Ajustar startPage si estamos cerca del final
            if (endPage - startPage + 1 < maxButtons) {
                startPage = Math.max(1, endPage - maxButtons + 1);
            }
            
            // Agregar primera página y puntos suspensivos si es necesario
            if (startPage > 1) {
                html += `<button onclick="loadLogs(1)" class="page-number ${1 === currentPage ? 'active' : ''}">1</button>`;
                if (startPage > 2) html += '<span class="page-dots">...</span>';
            }
            
            // Agregar números de página
            for (let i = startPage; i <= endPage; i++) {
                html += `<button onclick="loadLogs(${i})" class="page-number ${i === currentPage ? 'active' : ''}">${i}</button>`;
            }
            
            // Agregar última página y puntos suspensivos si es necesario
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) html += '<span class="page-dots">...</span>';
                html += `<button onclick="loadLogs(${totalPages})" class="page-number ${totalPages === currentPage ? 'active' : ''}">${totalPages}</button>`;
            }
            
            pageNumbers.innerHTML = html;
        }

        // Event listeners para los botones de paginación
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                loadLogs(currentPage - 1);
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            if (currentPage < totalPages) {
                loadLogs(currentPage + 1);
            }
        });

        // Cargar logs cuando el documento esté listo
        document.addEventListener('DOMContentLoaded', () => {
            loadLogs();
        });

        async function logout() {
            const logoutBtn = document.querySelector('.logout-btn');
            logoutBtn.classList.add('loading');
            
            try {
                await fetch('/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
            } finally {
                localStorage.removeItem('jwtToken');
                window.location.href = '/';
            }
        }

        async function refreshLogs() {
            const refreshBtn = document.querySelector('.refresh-btn');
            refreshBtn.classList.add('rotating');
            await loadLogs(currentPage);
            setTimeout(() => {
                refreshBtn.classList.remove('rotating');
            }, 1000);
        }

        // Inicializar verificación y configurar intervalo
        checkAuth();
        setInterval(checkAuth, 30000);
    </script>
</body>
</html> 